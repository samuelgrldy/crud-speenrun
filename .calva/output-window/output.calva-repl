; This is the Calva REPL Window.
; It's just a file, really, with some special treatment from Calva.
; Use it as a REPL input prompt if you like. (When the REPL is connected.)
; TIPS: The keyboard shortcut `ctrl+alt+o r` shows and focuses this window
; Please see https://calva.io/repl-window/ for more info.
; Happy coding! ♥️

; TIPS: As with any Clojure file when the REPL is connected:
; - `alt+enter` evaluates the current top level form.
; - `ctrl+enter` evaluates the current form.
; Special for this file:
; - `alt+up` and `alt+down` traverse up and down the REPL command history
;    when the cursor is after the last contents at the prompt

PLEASE NOTE
We will update the default location of this file. 
The new default location will be 
  "<projectRootPath>/.calva/repl.calva-repl"
For now the legacy path is used by default.
To give yourself a smooth transition, you can opt in
to the change, by configuring this setting as false: 
  "calva.useLegacyReplWindowPath"
and then add "**/.calva/repl.calva-repl" to your ".gitignore" file.


This file is configured as the output destination for all REPL output.
You can configure this with the setting:
  "calva.outputDestinations"


; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Starting Jack-in Terminal: pushd c:\Users\ZENIUS EDUCATION\Documents\GitHub\crud-speenrun & cmd.exe /d /c lein update-in :dependencies conj [nrepl,"1.0.0"] -- update-in :plugins conj [cider/cider-nrepl,"0.28.5"] -- update-in [:repl-options,:nrepl-middleware] conj '["cider.nrepl/cider-middleware"]' -- repl :headless & popd
; Using host:port 127.0.0.1:59936 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉app.core꞉> 
"Please see https://calva.io/output/#about-stdout-in-the-repl-window
about why stdout printed to this file is prepended with `;` to be line comments."
clj꞉app.core꞉> 
; Jack-in done.
clj꞉app.core꞉> 
java.util.UUID
clj꞉app.core꞉> 
#'app.core/create-collection
clj꞉app.core꞉> 
#'app.core/generateUUID
clj꞉app.core꞉> 
#'app.core/add-doc-to-collection
clj꞉app.core꞉> 
#'app.core/add-doc-to-collection
clj꞉app.core꞉> 
#'app.core/add-many-docs-to-collection
clj꞉app.core꞉> 
#'app.core/read-doc-from-coll
clj꞉app.core꞉> 
#'app.core/find-docs-on-coll
clj꞉app.core꞉> 
#'app.core/update-doc
clj꞉app.core꞉> 
#'app.core/delete-doc
clj꞉app.core꞉> 
#'app.core/delete-many-docs
clj꞉app.core꞉> 
; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Starting Jack-in Terminal: pushd c:\Users\ZENIUS EDUCATION\Documents\GitHub\crud-speenrun & cmd.exe /d /c lein update-in :dependencies conj [nrepl,"1.0.0"] -- update-in :plugins conj [cider/cider-nrepl,"0.28.5"] -- update-in [:repl-options,:nrepl-middleware] conj '["cider.nrepl/cider-middleware"]' -- repl :headless & popd
; nREPL connection failed: Error: read ECONNRESET
; Failed connecting.
; nREPL Connection was closed
; Using host:port 127.0.0.1:60127 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉app.core꞉> 
; Jack-in done.
clj꞉app.core꞉> 
(create-collection "lasttest")
nil
clj꞉app.core꞉> 
(add-doc-to-collection "lasttest" {:name "singleinput"})
nil
clj꞉app.core꞉> 
(add-many-docs-to-collection "lasttest" [{:name "multiinput1"} {:name "multiinput2"}])
nil
clj꞉app.core꞉> 
#'app.core/read-all-doc-from-coll
clj꞉app.core꞉> 
(read-all-doc-from-coll "lasttest")
({:name "singleinput", :id "f3b3b3b4-0b1b-4b1b-8b1b-1b1b1b1b1b1b"} {:name "multiinput1", :id "f3b3b3b4-0b1b-4b1b-8b1b-1b1b1b1b1b1b"} {:name "multiinput2", :id "f3b3b3b4-0b1b-4b1b-8b1b-1b1b1b1b1b1b"})
{:name "multiinput2", :id "f3b3b3b4-0b1b-4b1b-8b1b-1b1b1b1b1b1b"}
clj꞉app.core꞉> 
({:name "singleinput", :id "514cddc3-d16b-47e0-8be4-b4b5521d5a0c"}
 {:name "multiinput1", :id "2857ee33-8824-41e5-9093-cd29cc17342c"}
 {:name "multiinput2", :id "cb1926b8-4818-46bc-9768-1a4eae485d79"})
clj꞉app.core꞉> 
(read-doc-from-coll "lasttest" "f3b3b3b4-0b1b-4b1b-8b1b-1b1b1b1b1b1b")
"gaada doc-nya bos"
clj꞉app.core꞉> 
(read-all-doc-from-coll "lasttest")
({:name "singleinput", :id "514cddc3-d16b-47e0-8be4-b4b5521d5a0c"}
 {:name "multiinput1", :id "2857ee33-8824-41e5-9093-cd29cc17342c"}
 {:name "multiinput2", :id "cb1926b8-4818-46bc-9768-1a4eae485d79"})
clj꞉app.core꞉> 
(read-doc-from-coll "lasttest" "cb1926b8-4818-46bc-9768-1a4eae485d79")
{:name "multiinput2", :id "cb1926b8-4818-46bc-9768-1a4eae485d79"}
clj꞉app.core꞉> 
(find-docs-on-coll "lasttest" {:name "multiinput2"})
({:name "multiinput2", :id "cb1926b8-4818-46bc-9768-1a4eae485d79"})
clj꞉app.core꞉> 
(update-doc "lasttest" "cb1926b8-4818-46bc-9768-1a4eae485d79" {:name "multiinput2updated" :test "tis"})
nil
clj꞉app.core꞉> 
(read-doc-from-coll "lasttest" "cb1926b8-4818-46bc-9768-1a4eae485d79")
{:name "multiinput2updated", :id "cb1926b8-4818-46bc-9768-1a4eae485d79", :test "tis"}
clj꞉app.core꞉> 
(delete-doc "lasttest" "2857ee33-8824-41e5-9093-cd29cc17342c")
nil
clj꞉app.core꞉> 
#'app.core/delete-many-docs
clj꞉app.core꞉> 
(delete-many-docs "lasttest" ["514cddc3-d16b-47e0-8be4-b4b5521d5a0c" "cb1926b8-4818-46bc-9768-1a4eae485d79"])
nil
clj꞉app.core꞉> 
